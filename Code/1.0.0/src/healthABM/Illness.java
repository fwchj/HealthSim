package healthABM;

import java.util.ArrayList;
import java.util.LinkedHashMap;
/**
 * This class is a blueprint for each possible illness. Combining all instances of this class provides the full catalogue of illnesses. There is only one instance of 
 * each illness and it is independent of people actually suffering this illness. 
 * @author biiacscide12
 *
 */
public class Illness{

	// INSTANCE VARIABLES
	
	/** Numerical ID */
	protected int id;
	
	/** Identifier for Illnesses */
	protected String name; 
	
	/** 0 for non contagious diseases, 1 for contagious diseases*/
	protected boolean contagious;  
	
	/** Boolean being TRUE for chronical deseases */
	protected boolean chronical;
	
	/** List of parameters for conditional probabilities of contracting the disease*/
	protected LinkedHashMap<String,Double> betas; 
		
	
	/** List of existent treatments for the illness*/
	protected ArrayList<Treatment> treatments;
	
	/** Initial severity of Illness*/
	protected double initialSeverity;
	
	/** Change on health status when no treatment is applied*/
	protected double deltaSeverityWoTreatment;
	
	/** True if a general practitioner can diagnose it, false when a specialist is needed to diagnose it */
	protected boolean genDiagnosis;
	
	/** Base probability of detection (pi_0 in eq:probCorrectDetection). This is the probability of detection for a good provider with no particular investment in diagnostics*/
	protected double probabilityDetection;
	
	/** Marginal effect of diagnostic investment to the probability of detection (see eq:probCorrectDetection)*/
	public double deltaProbDetectionInvest; 

	/** Maximum probability of detection */
	public double probMaxDectection; 
	
	public double initialSev;
	
	/** Records the cost generated by this illness. Is reset at the beginning of each period*/
	public double currentCost;
	
	/** Boolean to indicate if this illness requires a emergency response (i.e. not considering budget)*/
	public boolean emergency;


	
	

	// CONSTRUCTOR
	/**
	 * @param name as String
	 * @param betas	HashMap of String,Double with all betas for the risk regression
	 * @param contagious boolean being true if the illness is contagious
	 * @param chronical boolean being true if the illness is chronical
	 * @param severity Initial severity
	 * @param deltaSev Change in severity by tick
	 * @param visibilitySymptoms Number of ticks until symptoms are visible (no longer in use)
	 * @param probabilityDetection Probability of detection by health care provider
	 * @param deltaProbDetectionInvestment marginal increase of detection probability by diagnosis
	 * @param probMaxDetection maximum probability of detection (should be between 0 and 1)
	 * @param treat ArrayList of treatments 
	 */
	public Illness (int id,String name,LinkedHashMap<String,Double> betas, boolean contagious, boolean chronical, double severity, 
			double deltaSev, int visibilitySymptoms, double probabilityDetection, double deltaProbDetectionInvestment,
			double probMaxDetection, ArrayList<Treatment> treat, double initialSev,boolean emergency){
		this.id 						= id;
		this.name 						= name;
		this.betas						= betas;
		this.contagious 				= contagious;
		this.chronical					= chronical;
		this.probabilityDetection 		= probabilityDetection;
		this.deltaProbDetectionInvest 	= deltaProbDetectionInvestment;
		this.probMaxDectection			= Math.min(1.0,probMaxDetection);
		this.treatments 				= treat;
		this.initialSeverity			= severity;
		this.deltaSeverityWoTreatment	= deltaSev;
		this.initialSev					= initialSev;
		this.currentCost				= 0.0;
		this.emergency					= emergency;
		
		Model.counterIllness++;
		
		
		Model.incidence.put(this, 0);		// Links each illness to the number 
		
		
		
		
		this.treatments = new ArrayList<Treatment>();
		
		
		
		
		// Just printing some stuff to the console to see if the import was ok
//		System.out.printf("I just created a new illness called '%s' which is contagious=%s and chronical =%s\n",name,contagious,chronical);
//		System.out.printf("\tIt has visible symptoms after %s weeks, an initical severity of %s and a deltaSeverity of %s\n\tThe probabilty of detection is %s\n",visibilitySymptoms,severity,deltaSeverityWoTreatment,probabilityDetection);
//		System.out.printf("\tThe risk regresssion is something like:\n\t");
//		System.out.printf("Visibility after %s period\n",this.visibilitySymptoms);
		
	}
	
	

	
	
	
	
	/**Returns the initial severity value
	 * @return initialSeverity as double*/
	public double getInitialSeverity(){
		return this.initialSeverity;
	}
	
	/**Returns the Illness delta severity value without treatment
	 * @return delta severity without treatment as double*/
	public double getDeltaSevWoTreatment(){
		return this.deltaSeverityWoTreatment;
	}

	
	// OTHER METHODS

	/**
	 * Returns the cheapest self-administered treatment. 
	 * @return Treatment with the lowest cost, in case of not finding any, <b>null</b> is returned
	 * @author LNPP, Florian
	 * @version 12-Nov-2018
	 */
	public Treatment getCheapestSelfTreatment() {
			Treatment cheapest = null;
			double cost = Double.MAX_VALUE;
			for (Treatment t: this.treatments) {
			    if(t.type==TreatmentType.SELF){
			    	if(t.cost<cost){
			    		cost = t.cost;
			    		cheapest = t;
			    }
			}
		}
		return cheapest; 
	}
	
	/**
	 * Returns an array list of all treatments of a given type. 
	 * @param type Type of treatment using {@link TreatmentType}
	 * @return ArrayList&lt;Treatment&gt; containing all treatments of the provided type
	 */
	public ArrayList<Treatment> getTreatments(TreatmentType type, double severity) {
			ArrayList<Treatment> result = new ArrayList<Treatment>();
			
			
			for (Treatment t: this.treatments) {
			    if(t.type==type && severity <= t.maxSeverity && severity >= t.minSeverity){
			    	result.add(t);
			}
		}
		return result;
	}
	
	/**
	 * Returns the value of the coefficient associated with the name of the variable  
	 * @param name coefficient name (typically something like 'age')
	 * @return coefficient as double
	 */
	public double getBeta(String name){
		return this.betas.get(name);
		
	}
	
	
	
	
	/**
	 * Returns the number of new cases in this tick (incidence) - for export purpose
	 * @return number of new cases
	 */
	public int getIncidence(){
		return Model.incidence.get(this);
	}
	/**
	 * Returns the name of the illness (for data export)
	 * @return name of illness as String
	 */
	public String getName(){
		return this.name;
	}
	/**
	 * Returns the current cost of the period)
	 * @return double cost
	 */
	public double getCurrentCost() {
		return Double.parseDouble(String.format("%9.2f",this.currentCost));
	}

	/** Returns the ID of the illness*/
	public double getID() {
		return this.id;
	}

	
}
